{"version":3,"sources":["selectors/selectFields.js","services/hnApi.js","styles/StoryStyles.js","components/Story.js","mappers/mapTime.js","styles/StoriesContainerStyles.js","hooks/useInfiniteScroll.js","constants/index.js","utils/debounce.js","containers/StoriesContainer.js","App.js","serviceWorker.js","index.js"],"names":["selectFields","id","by","url","time","title","baseUrl","newStoriesUrl","storyUrl","getStory","storyId","a","axios","get","result","data","getStoryIds","StoryWrapper","styled","section","StoryTitle","h1","StoryMeta","div","StoryMetaElement","span","props","color","Story","memo","useState","story","setStory","useEffect","then","data-testid","href","timestamp","seconds","Math","floor","Date","interval","mapTime","GlobalStyle","createGlobalStyle","StoriesContainerWrapper","main","useInfiniteScroll","loading","setLoading","count","setCount","handleScroll","func","wait","immediate","args","timeout","callNow","clearTimeout","setTimeout","apply","debounce","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener","StoriesContainer","storyIds","setStoryIds","data-test-id","slice","map","key","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","render","getElementById","URL","process","origin","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1470d56b.chunk.js","sourcesContent":["export const selectFields = ({ id, by, url, time, title } = {}) => ({\r\n  id,\r\n  by,\r\n  url,\r\n  time,\r\n  title,\r\n});\r\n","import axios from 'axios';\r\n\r\nimport { selectFields } from '../selectors/selectFields';\r\n\r\nexport const baseUrl = 'https://hacker-news.firebaseio.com/v0/';\r\nexport const newStoriesUrl = `${baseUrl}newstories.json`;\r\nexport const storyUrl = `${baseUrl}item/`;\r\n\r\nexport const getStory = async (storyId) => {\r\n  const result = await axios\r\n    .get(`${storyUrl + storyId}.json`);\r\n\r\n  return selectFields(result.data);\r\n};\r\n\r\nexport const getStoryIds = async () => {\r\n  const result = await axios.get(newStoriesUrl);\r\n\r\n  return result.data;\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const StoryWrapper = styled.section`\r\n  padding-top: 10px;\r\n  margin-bottom: 20px;\r\n  border-top: 1px solid #cccccc;\r\n\r\n  &:first-of-type {\r\n    border-top: 0;\r\n  }\r\n\r\n  &:last-of-type {\r\n    margin-bottom: 0;\r\n    padding-bottom: 0;\r\n  }\r\n`;\r\n\r\nexport const StoryTitle = styled.h1`\r\n  margin-bottom: 5px;\r\n  font-size: 18px;\r\n  line-height: 1.8;\r\n  margin: 0;\r\n  text-decoration: none;\r\n\r\n  a {\r\n    color: #2e2e2c;\r\n    background-color: #f8dc3d;\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\nexport const StoryMeta = styled.div`\r\n  font-style: italic;\r\n\r\n  > span:first-child {\r\n    margin-right: 10px;\r\n  }\r\n\r\n  > span:not(:first-child):before {\r\n    content: 'â€¢'\r\n    margin: 0 7px;\r\n  }\r\n\r\n  .story__meta-bold {\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nexport const StoryMetaElement = styled.span`\r\n  font-weight: bold;\r\n  color: ${props => props.color};\r\n`;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect, memo } from 'react';\r\nimport { getStory } from '../services/hnApi';\r\nimport {\r\n  StoryWrapper,\r\n  StoryTitle,\r\n  StoryMeta,\r\n  StoryMetaElement,\r\n} from '../styles/StoryStyles';\r\nimport { mapTime } from '../mappers/mapTime';\r\n\r\nexport const Story = memo(function Story({ storyId }) {\r\n  const [story, setStory] = useState({});\r\n\r\n  useEffect(() => {\r\n    getStory(storyId).then(data => data && data.url && setStory(data));\r\n  }, []);\r\n\r\n  return story && story.url ? (\r\n    <StoryWrapper data-testid=\"story\">\r\n      <StoryTitle>\r\n        <a href={story.url}>{story.title}</a>\r\n      </StoryTitle>\r\n      <StoryMeta>\r\n        <span data-testid=\"story-by\">\r\n          <StoryMetaElement color=\"#000\">By:</StoryMetaElement> {story.by}\r\n        </span>\r\n        <span data-testid=\"story-time\">\r\n          <StoryMetaElement color=\"#000\">Posted:</StoryMetaElement> {` `}\r\n          {mapTime(story.time)}\r\n        </span>\r\n      </StoryMeta>\r\n    </StoryWrapper>\r\n  ) : null;\r\n});\r\n","export const mapTime = timestamp => {\r\n  const seconds = Math.floor((new Date() - timestamp * 1000) / 1000);\r\n\r\n  let interval = Math.floor(seconds / 31536000);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} years`;\r\n  }\r\n  interval = Math.floor(seconds / 2592000);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} months`;\r\n  }\r\n  interval = Math.floor(seconds / 86400);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} days`;\r\n  }\r\n  interval = Math.floor(seconds / 3600);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} hours`;\r\n  }\r\n  interval = Math.floor(seconds / 60);\r\n\r\n  if (interval > 1) {\r\n    return `${interval} minutes`;\r\n  }\r\n\r\n  return `${Math.floor(seconds)} seconds`;\r\n};\r\n","import styled, { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    -webkit-box-sizing: border-box;\r\n            box-sizing: border-box;\r\n  }\r\n  *, *:before, *:after {\r\n    -webkit-box-sizing: inherit;\r\n            box-sizing: inherit;\r\n  }\r\n\r\n  body {\r\n    margin: 0;\r\n    padding: 0;\r\n    line-height: 1;\r\n    color: #202020;\r\n    background-color: #fafafe;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    font-size: 16px;\r\n  }\r\n\r\n  ul {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n`;\r\n\r\nexport const StoriesContainerWrapper = styled.main`\r\n  max-width: 1140px;\r\n  padding: 20px 15px;\r\n  margin: auto;\r\n`;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useEffect } from 'react';\r\nimport { STORY_INCREMENT, MAX_STORIES } from '../constants';\r\nimport { debounce } from '../utils/debounce';\r\n\r\nexport const useInfiniteScroll = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [count, setCount] = useState(STORY_INCREMENT);\r\n\r\n  const handleScroll = debounce(() => {\r\n    if (\r\n      window.innerHeight + document.documentElement.scrollTop !==\r\n        document.documentElement.offsetHeight ||\r\n      loading\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    setLoading(true);\r\n  }, 500);\r\n\r\n  useEffect(() => {\r\n    if (!loading) return;\r\n\r\n    if (count + STORY_INCREMENT >= MAX_STORIES) {\r\n      setCount(MAX_STORIES);\r\n    } else {\r\n      setCount(count + STORY_INCREMENT);\r\n    }\r\n\r\n    setLoading(false);\r\n  }, [loading]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => window.removeEventListener('scroll', handleScroll);\r\n  }, []);\r\n\r\n  return { count };\r\n};\r\n","export const MAX_STORIES = 500;\r\nexport const STORY_INCREMENT = 30;\r\n","export const debounce = (func, wait, immediate, args) => {\r\n  let timeout;\r\n\r\n  return () => {\r\n    const context = this;\r\n    const callNow = immediate && !timeout;\r\n    const later = () => {\r\n      timeout = null;\r\n      if (!immediate) func.apply(context, args);\r\n    };\r\n\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n\r\n    if (callNow) func.apply(context, args);\r\n  };\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { getStoryIds } from '../services/hnApi';\r\nimport { Story } from '../components/Story';\r\nimport {\r\n  GlobalStyle,\r\n  StoriesContainerWrapper,\r\n} from '../styles/StoriesContainerStyles';\r\nimport { useInfiniteScroll } from '../hooks/useInfiniteScroll';\r\n\r\nexport const StoriesContainer = () => {\r\n  const { count } = useInfiniteScroll();\r\n  const [storyIds, setStoryIds] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getStoryIds().then(data => setStoryIds(data));\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <StoriesContainerWrapper data-test-id=\"stories-container\">\r\n        <h1>Hacker News Stories</h1>\r\n        {storyIds.slice(0, count).map(storyId => (\r\n          <Story key={storyId} storyId={storyId} />\r\n        ))}\r\n      </StoriesContainerWrapper>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { StoriesContainer } from './containers/StoriesContainer';\r\n\r\nexport const App = () => <StoriesContainer />;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { App } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nrender(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}